from numpy import sin,pi,linspace,float32
from contextlib import redirect_stdout
with redirect_stdout(None):from pygame.mixer import init,Sound
from time import sleep
# T=30
fs=48000
# x=linspace(0,T*2*pi,int(T*fs))
with open('example','rb') as f:FI=f.read().decode('utf-8','replace').splitlines()
d={}# dict of found settings
with open(FI.pop(0),'rb') as f:
    for l in f.read().decode('utf-8','replace').splitlines():
        if '=' in l:d.__setitem__(l.split('=')[0],''.join(l.split('=')[1:]))
for i,k in enumerate(['notes','&also','instruments']):
    if k in d:
        for j,l in enumerate(d[k].split(',')):d[str(i)+str(j)]=l
F=''
for l in FI:
    if not l.startswith(d['comment']):F+=l.replace(' ','')
def notefields(dictionnary:dict,group:int)->list:
    out=[]
    for k in dictionnary:
        if k.startswith(str(group)):out.append(k)
    return out
def wrap(note:str)->list:return [Sound((volume*sin(linspace(0,((4/length)/BPM)*60*2*pi,int(((4/length)/BPM)*60*fs))*((int(d['tuning'])*(1 if octave==4 else 2*(4-octave)))*2**(d['notes'].index(note)/len(d['notes'].split(',')))))).astype(float32)),((4/length)/BPM)*60]
def play():
    while 1:
        for n in channels[0][1:]:
            n[0].play()
            sleep(n[1])
class digitchoice:
    def startswith(self,match:str):
        for c in match:
            if not c.isdigit():return 0
        return 1
class everythingchoice:pass# MAKE A CHOICE THAT MATCHES EVERYTHING (for loops and tuplets to catch everything until the ending character)
# EMBED SOLUTION IN MATCHES LIST (it's a placeholder to check for digits)
digits='digits'
d[digits]=digitchoice()
digitdump=''

i=0
channels=[]
BPM=60
length=octave=4
volume=50
detached_time=32
pizz_time=100
volume_step=5
sliding_time=8
defaultmatches={
    'outer':['channel','BPM'],
    'title':['drum section',digits],
    'innerDrum':[*notefields(d,2),'rest','length','longer','volume','more','less','volume step','detach','detached time','pizz','pizz time','channel','loop','tupplet'],
    'innerNotes':[*notefields(d,0),*notefields(d,1),'rest','length','longer','octave','up','down','volume','more','less','volume step','slide','sliding time','detach','detached time','pizz','pizz time','channel','loop','tupplet']
}
matches=defaultmatches['outer']
matchhistory=[]
# MODES
title=False
innerDrum=False
innerNotes=False
digitInnerMatch=None# will be set to the match to retrieve digits from the digitsdump string
substring=''

init(frequency=fs,size=32)
while i<len(F):
    substring+=F[i]
    match=[]
    print('{:7}{:<5}{:<2}{:<8}{:<5}'.format('drum'*innerDrum+'title'*title+'notes'*innerNotes,i,F[i],substring,digitdump))
    for k in matches:
        if d[k].startswith(substring):match.append(k)
    print(match)
    if len(match)==1:
        match=match[0]
        if match!=digits and substring!=d[match]:
            i+=1
            continue
        if title:
            if match==digits:digitdump=substring# the rest is done in the 'no match' if section
            else:
                channels.append([match])
                title=False
                innerDrum,matches=True,defaultmatches['innerDrum']
        elif innerDrum:pass
        elif innerNotes:
            if match==digits:digitdump=substring
            elif match in ['length','octave','volume','detached time','pizz time','volume step','sliding time']:matches,digitInnerMatch=[digits],match
            elif match.isdigit():print([substring,octave,length])
        else:# oustide
            if match=='channel':title,matches=True,defaultmatches['title']
            elif match=='BPM':matches=[digits]# the rest is done in the 'no match' if section
            else:digitdump+=substring
        substring=''
        matchhistory=[]
    elif not len(match):
        if digitdump:
            i-=1
            if title:
                channels.append([digitdump])
                title=False
                innerNotes,matches=True,defaultmatches['innerNotes']
            elif innerNotes:
                digitInnerMatch.replace(' ','_')
                print(f'Changing {digitInnerMatch} to {digitdump}')
                exec(digitInnerMatch+'=int(digitdump)')# black magic
                matches=defaultmatches['innerNotes']
            else:
                BPM=int(digitdump)
                matches=defaultmatches['outer']
            digitdump=''
        elif matchhistory:
            if min(matchhistory[-1],key=len)==max(matchhistory[-1],key=len):print(f'/!\\ Warning: conflict between {len(matchhistory[-1])} matches {matchhistory[-1]}')
            else:
                channels[-1].append(wrap(min(matchhistory[-1],key=len)))
                i-=1
        substring=''
        matchhistory=[]
    else:matchhistory.append(list(d[k] for k in match))
    i+=1
print(channels)
play()