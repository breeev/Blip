Hi!
    Before we start, please know that every parametter listed here is necessary. Removing one will remove a key from a dictionnary and trigger a KeyError. Also, please do not include linebreaks. Note that you can include spaces here, but they won't matter. Use them for readability here and / or in the main file.
    You can write basically anything anywhere as long as it doesn't start with a known parametter.
    Specify below how you would like to write notes. They are written from bass to treble, the first one will be used as the base for tuning.
    You can have any number of notes you want, their frequency will be equally distributed.
    For the settings, try to clean them and don't include special characters please because Python don't like that.

notes=A,A#,B,C,C#,D,D#,E,F,F#,G,G#

    Then, you also want to specify how to recognize other notes that give the same pitches as the notes above. Each note will be replaced by the interpreter using the same index as the notes above. For example, Cb is actually just the pitch of B, so why would we care when listening to it? There's also a tuning param for the magic formula that calculates frequencies.

&also=A,Bb,Cb,B#,Db,D,Eb,Fb,E#,Gb,G,Ab
tuning=442
rest=:
length=l
longer=-

    When choosing a lengh, a higher value will mean faster notes: an l1 will last four l4, an l2 is two l4 etc.
    We still need to switch octaves:

octave=o
up=>
down=<
    Remember that you can still call octaves for a single note the MML way, by placing the octave after the note (A3, B2...).
    Now, the special effects. Let's start with sound. You probably noticed the "%" above, that's the placeholder for the octave value.

volume=v
more=^
less=_
volume step=V

    Sometimes you want the notes to be sliding to each other or separated by some silence. These effects are easy to implement and will be written between notes (A-B-C.D.E). The time that the sliding takes before the next note is in the same unit as the lengh. Same unit for detached time, the time spent between notes. The pizzicato time however is in miliseconds to be more precise.

slide=~
sliding time=s
detach=.
detached time=d
pizz='
pizz time=p

    Channels are monophonic, so you need multiple channels to make chords. The number of channels is unlimited. They are recognized by a digit and start with 1, channel 0 is used for tempi modifications.

channel=@

    Comments can be written anywhere with this :

comment=$

    Loops and tuplets. Tuplets are encapsulated and everything inside is played at the current lengh.

loop=(%)
tupplet=[%]

    Outside of any channel, at the beggining you can precise the BPM for all channels and settings used.

BPM=BPM

    Now, let's take a look at drums. A channel will be treated differently if it's not named with a digit but with this symbol:

drum section=D

    Then, custom instruments are indentified by a name. Its index will be sent to the sound processor. The rest is just like another channel.

instruments=k,K,h,H,s,S

    You're done! You can start composing or arranging. This file can be saved with any name you like as long as it's included in the beggining of your blip file.